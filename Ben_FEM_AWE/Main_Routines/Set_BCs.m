function [M_tilda,M,K,F] = Set_BCs(model,mesh,Elements,Nodes,edges_ABC,M,K,F,c)
%Set_BCs Enforce enforce absorbing boundary conditions and dirichilet
%boundary conditions by buildig the absorbing matrix, M_tilda, and altering
%the M,K,F arrays respectively.
%
%   Inputs:
%   model: MATLAB PDE object
%   mesh:  MATLAB PDE object
%   Elements: elements array generated by GenerateLinearMesh function
%   Nodes: nodes array generated by GenerateLinearMesh funtion
%   edges_ABC: the edges of the mesh where you want to enforce absorbing
%              boundary conditions
%   M: global mass matrix
%   K: global stiffness matrix
%   F: global load vector
%   c: waveseed squared function c(x,z) 
%
%   Outputs:
%   M_tilda: abosrbing matrix 
%   M,K,F:   altered global matrices as to enforce dirichilet boundary
%            condition

% get edges inds
edge_inds = [1:model.Geometry.NumEdges];

% get node and elements indices where ABCs have been specificed
NID = findNodes(mesh,'region','Edge',edges_ABC);
EID = findElements(mesh,'attached',NID);  

% assiegne the remained edges nodes and elements to dirichilet bcs
edge_dirch = setdiff(edge_inds,edges_ABC);
dirch_node_inds = findNodes(mesh,'region','Edge',edge_dirch);

% plot the mesh with boundary conditions
figure;
pdemesh(model)
hold on
scatter(Nodes(1,NID),Nodes(2,NID),'r','filled')
scatter(Nodes(1,dirch_node_inds),Nodes(2,dirch_node_inds),'k','filled')
legend('','','ABC','Dirch BC','Location','southoutside')


Elements_ABC = Elements(:,EID);

N_el = length(Elements_ABC);
N = length(Nodes);
n = 2;

% define the shape funcitons and their derivatives
phi{1} = @(xi,eta) 1 - xi;
phi{2} = @(xi,eta) xi;

% define Gauss points and weights
G = [0.1127 0.5000 0.8873;
    [5/9 8/9 5/9]/2]';

% initialize M_tilda
M_tilda = sparse(N,N);

% Assemble M_tilde
for k = 1:N_el
    
    IV = Elements_ABC(:,k);
    IV = IV(ismember(IV,NID));
    
    if length(IV) == 2
        
        V = Nodes(:,IV);
        h = norm(V(:,1)-V(:,2));
        M_tilda_delta = Calc_M_tilda_delta(V,c,h,phi,G);
        
        for i = 1:n
            for j = 1:n
                
                M_tilda(IV(i),IV(j)) = M_tilda(IV(i),IV(j)) + M_tilda_delta(i,j);
                
            end
        end
        
    end
end

% implement dirichilet bc on non-absorbing boundaries
for i = dirch_node_inds
   F(i) = 0; 
   K(i,:) = 0;
   K(i,i) = 1;
   M(i,:) = 0;
   M(i,i) = 1;
end

end

